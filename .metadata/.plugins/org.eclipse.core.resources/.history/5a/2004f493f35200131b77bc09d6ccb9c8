package edu.sjsu.cmpe.dropbox.api.resources;

import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import com.mongodb.BasicDBList;
import com.mongodb.BasicDBObject;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.gridfs.GridFS;
import com.mongodb.gridfs.GridFSDBFile;
import com.sun.jersey.core.header.FormDataContentDisposition;
import com.sun.jersey.multipart.FormDataParam;
import com.yammer.metrics.annotation.Timed;

import edu.sjsu.cmpe.dropbox.domain.User;
import edu.sjsu.cmpe.dropbox.domain.userFile;
import edu.sjsu.cmpe.dropbox.dto.FileDto;
import edu.sjsu.cmpe.dropbox.dto.LinkDto;
import edu.sjsu.cmpe.dropbox.dto.LinksDto;
import edu.sjsu.cmpe.dropbox.view.UploadView;
import edu.sjsu.cmpe.dropbox.api.resources.DropboxFileManagement;
import freemarker.template.Configuration;
import freemarker.template.SimpleHash;
import freemarker.template.Template;


@Path("/v1/users")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class DropboxResource {
	
	private MongoDBInstance mongodb = new MongoDBInstance();
	private DBCollection colluser = mongodb.getColluser();
	private DBCollection colldocument = mongodb.getColldocument();
	
	private DropboxFileManagement manageFile = new DropboxFileManagement();
	private Configuration cfg;
	private Template template;	

//	Aradhana		
		@GET    
	    @Path("/{userID}/files")
	    @Produces(MediaType.TEXT_HTML)
	    @Timed(name = "upload-file")
	    public UploadView getUploadPage(@PathParam("userID") int userID) {
			return manageFile.getUploadPage(userID);
	    }    
		
		@GET
		@Path("/{userID}/files/{id}")
		@Timed(name = "view-file")
		public FileDto getMyFileByUserIdById(@PathParam("userID") int userID, @PathParam("id") int id) {
			return manageFile.getMyFileByUserIdById(userID, id);
		}
		
		@POST
	    @Path("/{userID}/files")
	    @Consumes(MediaType.MULTIPART_FORM_DATA)
	    @Timed(name = "create-file")    
	    public Response fileUpload(@PathParam("userID") int userID, @FormDataParam("file") InputStream uploadedInputStream, @FormDataParam("file") FormDataContentDisposition fileInfo) throws IOException
	    {
	        return manageFile.fileUpload(userID, uploadedInputStream, fileInfo);
	    } 

		@DELETE
		@Path("/{userID}/files/{id}")
		@Timed(name = "delete-file")
		public LinkDto deleteMyFileByUserIdAndId(@PathParam("userID") int userID, @PathParam("id") Integer id) {
	      return manageFile.deleteMyFileByUserIdAndId(userID, id);
		}
		
		@PUT
		@Path("/{userID}/files/{id}")
		@Timed(name = "update-files")
		public void updateFileByEmail(@PathParam("userID") int userID,	@PathParam("id") int id, @QueryParam("sharedWith") String firstName) {
	        manageFile.updateFileByEmail(userID, id, firstName);
		}
// Aradhana ends
// Sina Starts		
	    @DELETE
	    @Path("/{userID}")
	    @Timed(name = "delete-user")
	    public Response deleteUserByEmail(@PathParam("userID") int userID) {
		// FIXME - Dummy code
	    	BasicDBObject user = new BasicDBObject();
	    	user.put("userID", userID);
	    	DBCursor cursor = colluser.find(user);

	    	while (cursor.hasNext()){
	    		 BasicDBList e = (BasicDBList) cursor.next().get("myFiles"); 
	    		 for (int i=0;i<e.size();i++) {
	    			 BasicDBObject file = new BasicDBObject();
	    		    	file.put("fileID", e.get(i));
	    		    	colldocument.remove(file);
	    			 }
	    	}

	    	colluser.remove(user);
	    	return Response.status(201).entity(new LinkDto("create-user", "/users","POST")).build();
	    }

	    @GET
	    @Path("/{userID}/filesShared/{id}")
	    @Timed(name = "view-filesShared")
	    public Response getFilesSharedByEmailById(@PathParam("userID") int userID, @PathParam("id") int id) {

	    	BasicDBObject andQuery = new BasicDBObject();
	    	List<BasicDBObject> obj = new ArrayList<BasicDBObject>();
	    	obj.add(new BasicDBObject("fileID", id));
	    	obj.add(new BasicDBObject("sharedWith", userID));
	    	andQuery.put("$and", obj);
	    	DBCursor cursor = colldocument.find(andQuery);
	    	String output = "";
	    	while(cursor.hasNext()) {
	    	    output +=cursor.next();
	    	}

	    	return Response.status(200).entity(output).build();
	    }
	    
	    @POST
	    @Timed(name = "create-user")
	    public Response setUserByEmail(User user) {

	    	BasicDBObject query = new BasicDBObject();
	    	BasicDBObject field = new BasicDBObject();
	    	field.put("userCount", 1);
	    	DBCursor cursor = colluser.find(query,field);
	    	int userID=99;
	    	BasicDBObject obj = (BasicDBObject) cursor.next();
	    	userID=obj.getInt("userCount"); 	
	   
	    	BasicDBObject ob = new BasicDBObject();
	    	ob.append("userID", userID);
	    	ob.append("firstName", user.getFirstName());
	    	ob.append("lastName", user.getLastName());
	    	ob.append("password", user.getPassword());
	    	ob.append("email", user.getEmail());
	    	ob.append("status", user.getStatus());
	    	ob.append("designation", user.getDesignation());
	    	ob.append("myFiles",new ArrayList<String>());
	    	ob.append("filesShared",new ArrayList<String>());   	
	    	colluser.insert(ob);
	    	BasicDBObject countQuery = new BasicDBObject().append("userCount", userID);
	    	BasicDBObject newDoc = new BasicDBObject();
	    	newDoc.append("$set", new BasicDBObject("userCount",++userID));
	    	colluser.update(countQuery,newDoc );
	    	
	    	LinksDto links = new LinksDto();
	    	links.addLink(new LinkDto("view-user", "/users/" + user.getEmail(),
	    		"GET"));
	    	links.addLink(new LinkDto("update-user",
	    		"/users/" + user.getEmail(), "PUT"));
	    	links.addLink(new LinkDto("update-user",
	        		"/users/" + user.getEmail(), "POST"));
	    	links.addLink(new LinkDto("delete-user",
	        		"/users/" + user.getEmail(), "DELETE"));
	    	links.addLink(new LinkDto("create-file",
	        		"/users/" + user.getEmail() +"/files", "POST"));

	    	return Response.status(201).entity(links).build();
	  	
	    }
	    
	    @ GET
	    @Path("/{userID}")
	    @Timed(name = "view-user")
	    public Response getUserByUID(@PathParam("userID") int uID) {
	    	
	    	DBCursor cursor = colluser.find(new BasicDBObject().append("userID", uID ));
	    	
	    	String output = "";
	    	while(cursor.hasNext()) {
	    		output +=cursor.next();
	    	
	    	}

	    	return Response.status(200).entity(output).build();
	    }

		private Configuration createFreemarkerConfiguration() {
	        Configuration retVal = new Configuration();
	        retVal.setClassForTemplateLoading(DropboxResource.class, "/freemarker");
	        return retVal;
	    }

	  /*  @GET
	    @Path("/{userid}/filesshared")
	    @Produces(MediaType.TEXT_HTML)
	    @Timed(name = "Get-filesshared")
	    public Response getSharedFilesByUserID(@PathParam("userid") long userid) {
	    	BasicDBObject query = new BasicDBObject().append("sharedWith",userid);
	    	BasicDBObject fields = new BasicDBObject();
	    	
	    	DBCursor cursor = colldocument.find(query, fields);
	    	Writer output = new StringWriter();
	    	
	    	try {
	    		cfg = createFreemarkerConfiguration();
				template = cfg.getTemplate("sharedFiles.ftl");
				SimpleHash root = new SimpleHash();
				root.put("sharedFiles", cursor.toArray());
				template.process(root, output);
				
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
//	    	String output = "";
//	    	while(cursor.hasNext()) {
//	    	    output +=cursor.next();
//	    	}
	    	return Response.status(200).entity(output.toString()).build();
	    }*/
// Sina Ends	
	    
	    //Trupti Start
	    @GET
	    @Path("/{userID}/myfiles")
	    @Produces(MediaType.TEXT_HTML)
	    @Timed(name = "Get-myfiles")
	    public Response getMyFilesByUserID(@PathParam("userID") long userid) throws IOException {
	    		//MongoClient db = new MongoClient();
	    		//DB dbc = db.getDB("test");
	    		List<userFile> uf = new ArrayList<userFile>();
	    		GridFS myFS = new GridFS(mongodb.getdb(), "document");
			
	    		userFile uf1 = null;
	    		List<GridFSDBFile> getfile = myFS.find(new BasicDBObject("metadata.owner" , userid ));
	    		Writer output = new StringWriter();	    		
	    		Iterator< GridFSDBFile> eachFile =  getfile.iterator();
	    		while( eachFile.hasNext() )
	    			{			 
	    			uf1 = new userFile();
	    			GridFSDBFile gf = eachFile.next();
	    			uf1.setName(gf.getFilename());
	    			DBObject db1 = gf.getMetaData();
	    			uf1.setFileID((Integer) db1.get("fileID"));	  
	    			uf1.setOwner.(Integer)db1.get("owner"));
	    			uf.add(uf1);
	    			}
	    		try {
		    		cfg = createFreemarkerConfiguration();
					template = cfg.getTemplate("myfiles.ftl");
					SimpleHash root = new SimpleHash();
					root.put("myfiles", uf);
					template.process(root, output);
					
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	    		return Response.status(200).entity(output.toString()).build();
	    	//return new MyfilesView(manageFile.getMyFiles());
	    }
	    
	    @GET
	    @Path("/{userID}/filesShared")
	    @Timed(name = "Get-filesshared")
	    public Response getSharedFilesByUserID(@PathParam("userID") long userid) {
	    	GridFS myFS = new GridFS(mongodb.getdb(), "document");
	    	List<GridFSDBFile> getfile = myFS.find(new BasicDBObject("metadata.sharedWith" , userid ));
	    	userFile uf1 = null;
	    	List<userFile> uf = new ArrayList<userFile>();
	    	Writer output = new StringWriter();	    		
    		Iterator< GridFSDBFile> eachFile =  getfile.iterator();
    		while( eachFile.hasNext() )
    			{			 
    			uf1 = new userFile();
    			GridFSDBFile gf = eachFile.next();
    			uf1.setName(gf.getFilename());
    			DBObject db1 = gf.getMetaData();
    			uf1.setFileID((Integer) db1.get("fileID"));
    			// get all metadata items as user wants
    			uf.add(uf1);
    			}
    		try {
	    		cfg = createFreemarkerConfiguration();
				template = cfg.getTemplate("myfiles.ftl");
				SimpleHash root = new SimpleHash();
				root.put("myfiles", uf);
				template.process(root, output);
				
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    		return Response.status(200).entity(output.toString()).build();
	    }
	    
	    @PUT
	    @Path("/{userID}")
	    @Timed(name = "update-userdata")
	    public void updateUserdataByUserID(@PathParam("userID") long userid,@QueryParam("firstName") String firstName,@QueryParam("lastName") String lastName,@QueryParam("password") String password,@QueryParam("email") String email,@QueryParam("status") String status,@QueryParam("designation") String designation) {
		// FIXME - Dummy code
		   BasicDBObject ob = new BasicDBObject();
		   if(firstName != null)
	   	ob.append("firstName", firstName);
		   if(lastName != null)
	   	ob.append("lastName", lastName);
		   if(password != null)
	   	ob.append("password", password);
		   if(email != null)
	   	ob.append("email", email);
		   if(status != null)
	   	ob.append("status", status);
		   if(designation != null)
	   	ob.append("designation", designation);

	        	BasicDBObject query = new BasicDBObject().append("UserID", userid);
	        	BasicDBObject newDoc = new BasicDBObject().append("$set", ob);
	        	colluser.update(query,newDoc );
	        	
	   
	        	
	        	
}
	    @GET
		   @Path("/{userID}/mydoc/{fileID}")
		   @Timed(name = "update-userdata")
		    public void GetFile(@PathParam("fileID") long fileID) throws IOException
		    {
			  	  
		    	GridFS myFS = new GridFS(mongodb.getdb(), "document");	
		    	 
				GridFSDBFile getfile = myFS.findOne(new BasicDBObject("metadata.fileID" , fileID ));
				String directoryName = "C:/testDB";
				File theDir = new File(directoryName);
				  // if the directory does not exist, create it
				  if (!theDir.exists()) {
				    System.out.println("creating directory: " + directoryName);
				    boolean result = theDir.mkdir();  

				     if(result) {    
				       System.out.println("DIR created");  
				     }
				  }
				  String filePath = "C:/testDB/" + getfile.getFilename();
				  File yourFile = new File(filePath);
				  if(!yourFile.exists()) {
				      yourFile.createNewFile();
				  } 
				FileOutputStream ofile = new FileOutputStream(filePath);
					
			     getfile.writeTo(ofile);
			     Desktop d =  Desktop.getDesktop();
			     d.open(yourFile);
				
		    }
	    //Trupti End

}
